package org.wanbotimport org.junit.runners.Parameterizedimport org.junit.runners.Parameterized.Parametersimport org.junit.runner.RunWithimport org.junit.Ignoreimport org.junit.Test
import static org.junit.Assert.assertThatimport static org.hamcrest.Matchers.*@RunWith(Parameterized.class)
class FindPointAssignmentsTest {
    /* reqs:     self-assignments ignored     quoted assignments ignored     multi assignments ignored (2+ for the same person in same email)     */
    def bot = new WanBot()
        def text    def expectedAssignments        FindPointAssignmentsTest(text, String... expectedAssignments) {        this.text = text        this.expectedAssignments = expectedAssignments    }        @Parameters    static data() {    [        // One-liners:        [ 'Horky: +1', ['Horky', 1] as String[] ] as Object[],        [ 'Horky: 1', ['Horky', 1] as String[] ] as Object[],        [ 'ryan: 8pts', ['ryan', 8] as String[] ] as Object[],        [ 'jamo: 16', ['jamo', 16] as String[] ] as Object[],        [ 'mike: +4pts', ['mike', 4] as String[] ] as Object[],        [ 'horky: 3 points', ['horky', 3] as String[] ] as Object[],        [ 'john +3 pts', ['john', 3] as String[] ] as Object[],        [ 'mike 4', ['mike', 4] as String[] ] as Object[],        [ 'mike +4 cause he reads npr too mcuh', ['mike', 4] as String[] ] as Object[],        [ 'horky gets 8 points cause he owns a mac', ['horky', 8] as String[] ] as Object[],        [ '10 points for horky', ['horky', 10] as String[] ] as Object[],        [ '10 scott because he is awesome', ['scott', 10] as String[] ] as Object[],        [ '+15pts mike', ['mike', 15] as String[] ] as Object[],        [ '+10 points marco', ['marco', 10] as String[] ] as Object[],        [ /15 pts is a lot of points to give out (yes this should work, the bot will say something like "I don't know who 'is' is"/, ['is', 15] as String[] ] as Object[],                // Multi-liners:["""\mike +1horky +2james +3eric +4\""",    ['mike', 1, 'horky', 2, 'james', 3, 'eric', 4] as String[]] as Object[],["""\horky 5blake: 43 pts for chris\""",    ['horky', 5, 'blake', 4, 'chris', 3] as String[]] as Object[]    ]    }        @Test    void parameterized_find_assignments() {        def actualAssignments = bot.findPointAssignmentsInMessageText(text)        assertThat("Number of assignments for text '${text}': ",            actualAssignments.size(), equalTo(expectedNumberOfAssignments()))        assertEachAssignmentIsExpected(actualAssignments)    }        def expectedNumberOfAssignments() {        return (int) (expectedAssignments.length / 2)    }    
    def assertEachAssignmentIsExpected(actualAssignments) {
        0.step(expectedAssignments.length, 2) {            def assignment = (int) (it / 2)            assertThat("An expected assignment name",                    actualAssignments[assignment][0], equalTo(expectedAssignments[it]))            assertThat("An expected assignment value",                    actualAssignments[assignment][1], equalTo(expectedAssignments[it + 1].toInteger()))        }
    }}