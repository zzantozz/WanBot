package org.wanbotimport org.junit.Testimport static org.junit.Assert.*import static org.hamcrest.Matchers.*import com.sun.mail.pop3.POP3Messageimport groovy.util.Expandopublic class ExtraWanBotTest {
    
    def bot = new WanBot()
    
    @Test
    void test_uniqify_weeds_out_duplicate_assignments() {        def input = [ ['mike', 1], ['mike', 2]]        def result = bot.uniqifyPointAssignments(input)        println result        assertThat("Number of unique assignments", result.size(), equalTo(1))        assertThat("Name of assignment", result[0][0], equalTo('mike'))    }        @Test    void test_uniqify_returns_last_assignment() {        def input = [ ['horky', 3], ['horky', 7] ]        def result = bot.uniqifyPointAssignments(input)        assertThat("Points", result[0][1], equalTo(7))    }        @Test    void test_wanbot_filter_passes_wan_messages() {        def message = new Expando()        message.getAllRecipients = { return ["white_and_nerdy@googlegroups.com"] }        def messagePassed = false        def processorSpy = { messagePassed = true }        bot.withWanFilter(message, processorSpy)        assertThat("Filter passed WaN message on", messagePassed, is(true))    }        @Test    void test_wanbot_filter_blocks_nonwan_messages() {        def message = new Expando()        message.getAllRecipients = { return ["zzantozz@gmail.com"] }        def messagePassed = false        def processorSpy = { messagePassed = true }        bot.withWanFilter(message, processorSpy)        assertThat("Filter blocks non-WaN messages", messagePassed, is(false))    }        @Test    void test_handleMessageAssignments_invokes_storer_for_each_assignment() {        def assigner = 'foo'        def parsedAssignments = [ ['bob', 5], ['zzantozz', 3] ]        def actualAssignments = []        def storerSpy = { assigner0, assignee, points ->            actualAssignments << [ assigner0, assignee, points ]        }        bot.handleMessageAssignments(assigner, parsedAssignments, storerSpy)        def expectedAssignments = [            [assigner, parsedAssignments[0][0], parsedAssignments[0][1]],            [assigner, parsedAssignments[1][0], parsedAssignments[1][1]]        ]        assertThat("Assignments correlated", actualAssignments, equalTo(expectedAssignments))    }}
